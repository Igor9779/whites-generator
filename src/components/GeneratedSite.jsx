import React, { useState } from "react";
import { generateSite } from "../utils/generateSite";
import { generateSingleSite } from "../utils/generateSingleSite";
import { generateMultiSite } from "../utils/generateMultiSite";
import { downloadHTML } from "../hooks/downloadHTML";
import { shuffle } from "../hooks/useShuffle";
import JSZip from "jszip";
import { saveAs } from "file-saver";

export default function GeneratedSite({ mode }) {
  const [siteHTML, setSiteHTML] = useState(generateSite("single"));
  const [previewPages, setPreviewPages] = useState(null);
  const [activePage, setActivePage] = useState("index.html");

  // üü° –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∞–π—Ç—É (single –∞–±–æ multi)
  const handleGenerate = async () => {
    const generator =
      mode === "single" ? generateSingleSite : generateMultiSite;
    const pages = await generator(true); // üü¢ –æ—Ç—Ä–∏–º—É—î–º–æ HTML –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
    setPreviewPages(pages);
    setActivePage("index.html");
  };

  // üü¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ZIP
  const handleDownload = async () => {
    if (!previewPages) return;

    const zip = new JSZip();
    Object.entries(previewPages).forEach(([name, html]) =>
      zip.file(name, html)
    );

    const blob = await zip.generateAsync({ type: "blob" });
    const fileName =
      mode === "single"
        ? `whiteex-single-${Date.now()}.zip`
        : `whiteex-multisite-${Date.now()}.zip`;

    saveAs(blob, fileName);
  };

  // üîÅ –ü–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ–π (–¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä–µ–∂–∏–º—É)
  const handleShuffle = () => {
    if (!previewPages || !activePage) return;

    // 1Ô∏è‚É£ –ü–∞—Ä—Å–∏–º–æ HTML –≤–∏–±—Ä–∞–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const parser = new DOMParser();
    const doc = parser.parseFromString(previewPages[activePage], "text/html");

    // 2Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    const header = doc.querySelector("nav, header");
    const footer = doc.querySelector("footer, .footer");
    const hero = doc.querySelector("#hero"); // üî• —à—É–∫–∞—î–º–æ —Å–∞–º–µ –ø–æ id="hero"
    const contact = doc.querySelector(
      "section.contact, section[id*='contact'], section[class*='contact']"
    );

    // 3Ô∏è‚É£ –£—Å—ñ —Å–µ–∫—Ü—ñ—ó
    const allSections = Array.from(doc.querySelectorAll("section"));
    let newBodyContent = "";

    // === üü¢ SINGLE –∞–±–æ INDEX (–±–∞–≥–∞—Ç–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π) ===
    if (
      mode === "single" ||
      (mode === "multi" && activePage === "index.html")
    ) {
      // —Å–µ—Ä–µ–¥–Ω—ñ —Å–µ–∫—Ü—ñ—ó –º—ñ–∂ hero —Ç–∞ contact
      const middle = allSections.filter((s) => s !== hero && s !== contact);
      const shuffledMiddle = shuffle(middle);

      // –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫: hero –∑–∞–≤–∂–¥–∏ –ø—ñ—Å–ª—è header
      newBodyContent = [
        header?.outerHTML || "",
        hero?.outerHTML || "", // üü¢ –∑–∞–≤–∂–¥–∏ –¥—Ä—É–≥–∞
        ...shuffledMiddle.map((s) => s.outerHTML),
        contact?.outerHTML || "", // –ø–µ—Ä–µ–¥ —Ñ—É—Ç–µ—Ä–æ–º
        footer?.outerHTML || "",
      ].join("\n");
    }

    // === üü° MULTI (about, price, contact) ‚Äî –±–µ–∑ hero ===
    else if (
      mode === "multi" &&
      ["about.html", "price.html", "contact.html"].includes(activePage)
    ) {
      const sectionsWithoutStatic = allSections.filter(
        (s) => s !== header && s !== footer
      );
      const shuffledSections = shuffle(sectionsWithoutStatic);

      newBodyContent = [
        header?.outerHTML || "",
        ...shuffledSections.map((s) => s.outerHTML),
        footer?.outerHTML || "",
      ].join("\n");
    }

    // === üî¥ MULTI (bmodel, privacy, terms) ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–º—ñ—à—É—î–º–æ ===
    else {
      return;
    }

    // 4Ô∏è‚É£ –û–Ω–æ–≤–ª–µ–Ω–Ω—è HTML
    const newHtml = doc.documentElement.outerHTML.replace(
      doc.body.outerHTML,
      `<body>${newBodyContent}</body>`
    );

    setPreviewPages({
      ...previewPages,
      [activePage]: newHtml,
    });
  };

  return (
    <div className="text-center">
      <div className="mb-3 d-flex flex-wrap justify-content-center gap-2">
        <button className="btn btn-warning" onClick={handleGenerate}>
          üé≤ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏{" "}
          {mode === "single" ? "–æ–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π" : "–±–∞–≥–∞—Ç–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π"} —Å–∞–π—Ç
        </button>

        <button className="btn btn-outline-dark" onClick={handleShuffle}>
          üîÅ –ü–µ—Ä–µ–º—ñ—à–∞—Ç–∏ —Å–µ–∫—Ü—ñ—ó ({mode === "single" ? "Single" : "Multi"})
        </button>

        <button className="btn btn-success" onClick={handleDownload}>
          ‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ZIP
        </button>
      </div>

      {/* üü£ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ */}
      {previewPages && (
        <div className="container mt-4">
          {/* üîπ –í–∫–ª–∞–¥–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ */}
          <ul className="nav nav-tabs justify-content-center mb-3">
            {Object.keys(previewPages).map((page) => (
              <li className="nav-item" key={page}>
                <button
                  className={`nav-link ${activePage === page ? "active" : ""}`}
                  onClick={() => setActivePage(page)}
                >
                  {page}
                </button>
              </li>
            ))}
          </ul>

          {/* üîπ –í–±—É–¥–æ–≤–∞–Ω–∏–π iframe –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É */}
          <iframe
            title={activePage}
            srcDoc={previewPages[activePage]}
            style={{
              width: "100%",
              height: "80vh",
              border: "1px solid #ccc",
              borderRadius: "8px",
            }}
          ></iframe>
        </div>
      )}
    </div>
  );
}
